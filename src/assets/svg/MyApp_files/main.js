import {
  DataShareService
} from "/chunk-QGR6GURN.js";
import {
  ApiService
} from "/chunk-T76RDSXB.js";

// src/main.ts
import { bootstrapApplication } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_platform-browser.js?v=84d90f7d";

// src/app/app.config.ts
import { provideRouter } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_router.js?v=84d90f7d";

// src/app/app.routes.ts
var routes = [
  // {
  //     path: '',
  //     redirectTo: '/login',
  //     pathMatch: 'full'  // Default route redirecting to login
  // },
  {
    path: "",
    loadComponent: () => import("/chunk-23P5EOUH.js").then((m) => m.LoginComponent)
  },
  {
    path: "login",
    loadComponent: () => import("/chunk-23P5EOUH.js").then((m) => m.LoginComponent)
  },
  // {
  //     path: '',
  //     loadComponent: () => import('./home/home.component').then(m => m.HomeComponent)
  // },
  {
    path: "home",
    loadComponent: () => import("/chunk-G5HXOP6B.js").then((m) => m.HomeComponent)
  },
  // {   path: 'category',
  //     loadComponent: () => import('./category-products/category-products.component').then(m => m.CategoryProductsComponent)
  // },
  {
    path: "category/:category_id",
    loadComponent: () => import("/chunk-53J3JACI.js").then((m) => m.CategoryProductsComponent)
  },
  {
    path: "brand/:brand_id",
    loadComponent: () => import("/chunk-53J3JACI.js").then((m) => m.CategoryProductsComponent)
  },
  {
    path: "product/:product_id",
    loadComponent: () => import("/chunk-YL5XKSCS.js").then((m) => m.ProductComponent)
  },
  {
    path: "wishlist/:user_id",
    loadComponent: () => import("/chunk-FEWQ2WVB.js").then((m) => m.WishlistComponent)
  },
  // {   path: 'cart/:user_id',
  //     loadComponent: () => import('./bag/bag.component').then(m => m.BagComponent)
  // },
  {
    path: "cart/:user_id",
    loadComponent: () => import("/chunk-CBEO6XH5.js").then((m) => m.ShoppingBagComponent)
  },
  {
    path: "search",
    loadComponent: () => import("/chunk-LYKU2PMU.js").then((m) => m.SearchComponent)
  },
  {
    path: "add-address",
    loadComponent: () => import("/chunk-QYTDIAHI.js").then((m) => m.AddAddressComponent)
  }
  // {   path: 'category/:id', 
  //     loadComponent: () => import('./category-products/category-products.component').then(m => m.CategoryProductsComponent),
  //     data: { categoryName: '' } 
  // },
  // ... other routes
];

// src/app/app.config.ts
import { provideClientHydration } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_platform-browser.js?v=84d90f7d";
import { provideHttpClient } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_common_http.js?v=84d90f7d";
var appConfig = {
  providers: [provideRouter(routes), provideClientHydration(), provideHttpClient()]
};

// src/app/app.component.ts
import { CommonModule, NgOptimizedImage } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_common.js?v=84d90f7d";
import { RouterOutlet } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_router.js?v=84d90f7d";
import { Component, HostListener, Inject, PLATFORM_ID } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_core.js?v=84d90f7d";
import { FormsModule } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_forms.js?v=84d90f7d";
import { isPlatformBrowser } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_common.js?v=84d90f7d";
import * as i02 from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_core.js?v=84d90f7d";
import * as i3 from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_platform-browser.js?v=84d90f7d";
import * as i4 from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_router.js?v=84d90f7d";

// src/app/services/data-access.service.ts
import { Injectable } from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_core.js?v=84d90f7d";
import * as i0 from "/@fs/Users/ayush7399/my-app/.angular/cache/18.2.9/my-app/vite/deps/@angular_core.js?v=84d90f7d";
var DataAccessService = class _DataAccessService {
  static {
    this.\u0275fac = function DataAccessService_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _DataAccessService)();
    };
  }
  static {
    this.\u0275prov = /* @__PURE__ */ i0.\u0275\u0275defineInjectable({ token: _DataAccessService, factory: _DataAccessService.\u0275fac, providedIn: "root" });
  }
};

// src/app/app.component.ts
var AppComponent = class _AppComponent {
  constructor(apiService, dataShare, titleService, renderer, router, route, dataService, platformId) {
    this.apiService = apiService;
    this.titleService = titleService;
    this.renderer = renderer;
    this.router = router;
    this.route = route;
    this.dataService = dataService;
    this.platformId = platformId;
    this.title = "my-app";
    this.previousUrl = "";
    this.currentUrlSlug = "";
    this.bodyClass = "";
    this.dwstarted = false;
  }
  ngOnInit() {
    this.checkScreenSize();
    if (isPlatformBrowser(this.platformId)) {
      const token = localStorage.getItem("auth_token");
      if (token) {
        this.router.navigate(["/home"]);
      } else {
        this.router.navigate(["/login"]);
      }
    } else {
      this.router.navigate(["/login"]);
    }
    ;
  }
  /** sending user info to store in android/ios app local storage */
  // sendUserInfotoNativeApp(deviceType: string) {
  //   let apiParams = {
  //     'mtd': 'getUserInfoforNativeApp'
  //   };    
  //   this.dataService.getData(apiParams).subscribe((response: any) => {
  //     if (response && response.api_status==true) {
  //       var userobj = { mobile: response.mobile, empcode: response.empcode, empname: response.empname, refresh_token: response.refresh_token };
  //       if(deviceType=='ios'){
  //         (window as any).webkit.messageHandlers.setUserInfoFromApp.postMessage(userobj);
  //       }else if(deviceType=='android'){
  //         if (typeof jdSalesInterface.setUserInfoFromApp === 'function') {
  //           jdSalesInterface.setUserInfoFromApp(JSON.stringify(userobj));
  //         }
  //       }
  //     }
  //   });
  // }
  autoAdjustiPhoneScreen() {
    const body = document.body;
    body.classList.remove("notchtop", "nonnotchtop");
    const userAgent = navigator.userAgent;
    const isIphone = /iPhone/.test(userAgent);
    if (isIphone) {
      if (screen.height >= 812 && screen.width >= 375) {
        body.classList.add("notchtop");
      } else if (screen.height >= 560 && screen.height < 812) {
        body.classList.add("nonnotchtop");
      }
    }
  }
  checkScreenSize() {
    if (typeof window !== "undefined" && typeof document !== "undefined") {
      const body = document.body;
      if (body.classList.length) {
        if (window.innerWidth > 1024) {
          body.classList.remove("mview");
          if (!body.classList.contains("webview")) {
            body.classList.add("webview");
          }
        } else {
          body.classList.add("mview");
          body.classList.remove("webview");
        }
      }
    }
  }
  setTitle(newTitle) {
    this.titleService.setTitle(newTitle);
  }
  static {
    this.\u0275fac = function AppComponent_Factory(__ngFactoryType__) {
      return new (__ngFactoryType__ || _AppComponent)(i02.\u0275\u0275directiveInject(ApiService), i02.\u0275\u0275directiveInject(DataShareService), i02.\u0275\u0275directiveInject(i3.Title), i02.\u0275\u0275directiveInject(i02.Renderer2), i02.\u0275\u0275directiveInject(i4.Router), i02.\u0275\u0275directiveInject(i4.ActivatedRoute), i02.\u0275\u0275directiveInject(DataAccessService), i02.\u0275\u0275directiveInject(PLATFORM_ID));
    };
  }
  static {
    this.\u0275cmp = /* @__PURE__ */ i02.\u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], hostBindings: function AppComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i02.\u0275\u0275listener("resize", function AppComponent_resize_HostBindingHandler() {
          return ctx.checkScreenSize();
        }, false, i02.\u0275\u0275resolveWindow);
      }
    }, standalone: true, features: [i02.\u0275\u0275ProvidersFeature([ApiService]), i02.\u0275\u0275StandaloneFeature], decls: 1, vars: 0, template: function AppComponent_Template(rf, ctx) {
      if (rf & 1) {
        i02.\u0275\u0275element(0, "router-outlet");
      }
    }, dependencies: [CommonModule, RouterOutlet, FormsModule] });
  }
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i02.\u0275setClassDebugInfo(AppComponent, { className: "AppComponent" });
})();

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));


//# sourceMappingURL=data:application/json;base64,